---
interface Props {
  title: string;
}

const { title } = Astro.props;

import fragment from "../glsl/balatro.frag";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <!--<link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <script src="libraries/shader-web-background.min.js" is:inline></script>
    <script
      id="balatro"
      type="x-shader/x-fragment"
      is:inline
      set:html={fragment}
    />
  </head>
  <body>
    <script is:inline>
      let t = 0;
      requestAnimationFrame(function update() {
        t += 1 / 120;
        requestAnimationFrame(update);
      });
      shaderWebBackground.shade({
        shaders: {
          balatro: {
            uniforms: {
              iResolution: (gl, loc, ctx) =>
                gl.uniform2f(loc, ctx.width, ctx.height),
              iTime: (gl, loc, ctx) => gl.uniform1f(loc, t),
            },
          },
        },
      });
    </script>
    <slot />
  </body>
</html>

<style is:global>
  @tailwind components;

  @font-face {
    font-family: "m6x11plus";
    src: url(/fonts/m6x11plus.ttf) format("truetype");
  }
  :root {
    @apply bg-slate-700;
  }
  @layer components {
    .render-pixelated {
      image-rendering: pixelated;
    }

    .text-shadow {
      text-shadow: 0 0.1rem 0 rgba(0, 0, 0, 0.25);
    }
    .text-shadow-lg {
      text-shadow: 0 0.25rem 0 rgba(0, 0, 0, 0.25);
    }
    .text-shadow-xl {
      text-shadow: 0 0.375rem 0 rgba(0, 0, 0, 0.25);
    }
    .text-shadow-2xl {
      text-shadow: 0 0.5rem 0 rgba(0, 0, 0, 0.25);
    }
    .pixel-corners {
      clip-path: polygon(
        0px calc(100% - 16px),
        4px calc(100% - 16px),
        4px calc(100% - 8px),
        8px calc(100% - 8px),
        8px calc(100% - 4px),
        16px calc(100% - 4px),
        16px 100%,
        calc(100% - 16px) 100%,
        calc(100% - 16px) calc(100% - 4px),
        calc(100% - 8px) calc(100% - 4px),
        calc(100% - 8px) calc(100% - 8px),
        calc(100% - 4px) calc(100% - 8px),
        calc(100% - 4px) calc(100% - 16px),
        100% calc(100% - 16px),
        100% 16px,
        calc(100% - 4px) 16px,
        calc(100% - 4px) 8px,
        calc(100% - 8px) 8px,
        calc(100% - 8px) 4px,
        calc(100% - 16px) 4px,
        calc(100% - 16px) 0px,
        16px 0px,
        16px 4px,
        8px 4px,
        8px 8px,
        4px 8px,
        4px 16px,
        0px 16px
      );
    }
    .pixel-corners-sm {
      clip-path: polygon(
        0px calc(100% - 8px),
        4px calc(100% - 8px),
        4px calc(100% - 4px),
        8px calc(100% - 4px),
        8px 100%,
        calc(100% - 8px) 100%,
        calc(100% - 8px) calc(100% - 4px),
        calc(100% - 4px) calc(100% - 4px),
        calc(100% - 4px) calc(100% - 8px),
        100% calc(100% - 8px),
        100% 8px,
        calc(100% - 4px) 8px,
        calc(100% - 4px) 4px,
        calc(100% - 8px) 4px,
        calc(100% - 8px) 0px,
        8px 0px,
        8px 4px,
        4px 4px,
        4px 8px,
        0px 8px
      );
    }
  }
</style>
