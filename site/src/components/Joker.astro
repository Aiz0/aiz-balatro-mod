---
import { Image } from "astro:assets";

interface Props {
  name: string;
  text: string[];
  badge: string;
  image: string;
  soul: boolean | undefined;
  index: number;
}
const { name, text, badge, image, soul, index } = Astro.props;

const base_path = "/src/assets";
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/*.png"
);
const image_path = `${base_path}/${image}.png`;
if (!images[image_path])
  throw new Error(`"${image_path}" does not exist in glob: "src/assets/*.png"`);

const regex = /{([^}]+)}/g;
const modifiedText = text.map((line) => {
  return (
    line.replaceAll("{}", "</span>").replace(regex, (_match, p1) => {
      const classes: string[] = [];
      p1.split(",").forEach((item: string) => {
        const [selector, color] = item.split(":");
        if (selector === "C") {
          switch (color) {
            case "white":
              classes.push("text-white");
            case "red":
            case "mult":
              classes.push("text-balatro-red");
              break;
            case "chips":
              classes.push("text-balatro-blue");
              break;
            case "attention":
              classes.push("text-balatro-orange");
              break;
            case "money":
              classes.push("text-balatro-gold");
              break;
            case "dark_edition":
              classes.push("text-balatro-blue-special");
              break;
            case "inactive":
              classes.push("text-balatro-grey-light");
              break;
            case "green":
              classes.push("text-balatro-green");
              break;
            case "planet":
              classes.push("text-balatro-cyan");
              break;
            case "tarot":
              classes.push("text-balatro-purple-tarot");
              break;
          }
        } else if (selector === "X") {
          switch (color) {
            case "mult":
              classes.push("bg-balatro-red");
              break;
          }
          classes.push("rounded-md px-1");
        }
      });
      return "</span><span class='" + classes.join(" ") + "'>";
    }) + "</span>"
  );
});

let badgeColor = "bg-balatro-inactive";
let badgeShadowColor = "shadow-black";
let badgeIndex = 0;
switch (badge.toLowerCase()) {
  case "common":
    badgeColor = "bg-balatro-blue";
    badgeShadowColor = "custom-shadow-balatro-blue-dark";
    badgeIndex = 1;
    break;
  case "uncommon":
    badgeColor = "bg-balatro-green";
    badgeShadowColor = "custom-shadow-balatro-green-dark";
    badgeIndex = 2;
    break;
  case "rare":
    badgeColor = "bg-balatro-red";
    badgeShadowColor = "custom-shadow-balatro-red-dark";
    badgeIndex = 3;
    break;
  case "legendary":
    badgeColor = "bg-balatro-purple";
    badgeShadowColor = "custom-shadow-balatro-purple-dark";
    badgeIndex = 4;
    break;
}
---

<div
  data-badge={badgeIndex}
  data-index={index}
  class="flex custom-shadow-balatro-grey-dark"
>
  <div class="pixel-corners flex border-4 border-balatro-grey bg-balatro-grey">
    <div
      class="pixel-corners flex w-96 flex-col items-center gap-3 bg-balatro-black p-4 text-2xl"
    >
      <!-- Name -->
      <h3 class="text-shadow-lg text-center text-4xl capitalize">{name}</h3>
      <!-- Image -->
      <div class="relative h-48 w-36">
        <Image
          src={images[image_path]()}
          alt=" "
          quality={100}
          class="render-pixelated absolute left-0 top-0 col-span-1 h-48 w-36 object-cover object-left drop-shadow-soul"
        />
        {
          soul && (
            <Image
              src={images[image_path]()}
              alt=" "
              quality={100}
              class="render-pixelated absolute left-0 top-0 h-48 w-36 animate-soul object-cover object-right drop-shadow-soul"
            />
          )
        }
      </div>
      <!-- Badge -->
      <div class={badgeShadowColor}>
        <div
          class={`w-36 py-1 text-2xl text-center capitalize ${badgeColor} text-shadow pixel-corners`}
        >
          {badge}
        </div>
      </div>
      <!-- Description -->
      <div class="w-full custom-shadow-balatro-grey-dark">
        <p
          class="pixel-corners min-h-20 content-center bg-white p-2 text-center text-balatro-black"
        >
          {
            modifiedText.map((line) => (
              <>
                <Fragment set:html={line} />
                <br />
              </>
            ))
          }
        </p>
      </div>
    </div>
  </div>
</div>
