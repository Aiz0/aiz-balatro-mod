---
import Image from "astro/components/Image.astro";

interface Props {
  name: string;
  text: string[];
  badge: string;
  image: string;
  soul: boolean | undefined;
}
const { name, text, badge, image, soul } = Astro.props;

const base_path = "../../../assets/2x";
const images = import.meta.glob<{ default: ImageMetadata }>(
  "../../../assets/2x/*.png"
);
const image_path = `${base_path}/${image}.png`;

const regex = /{([^}]+)}/g;
const modifiedText = text.map((line) => {
  return (
    line.replace("{}", "</span>").replace(regex, (_match, p1) => {
      const classes: string[] = [];
      p1.split(",").forEach((item: string) => {
        const [selector, color] = item.split(":");
        if (selector === "C") {
          classes.push(`text-balatro-${color}`);
        } else if (selector === "X") {
          classes.push(`bg-balatro-${color}`, "rounded-md px-1");
        }
      });
      return "</span><span class='" + classes.join(" ") + "'>";
    }) + "</span>"
  );
});

let badgeColor = "bg-balatro-inactive";
let badgeShadowColor = "shadow-black";
switch (badge.toLowerCase()) {
  case "common":
    badgeColor = "bg-balatro-badge-common";
    badgeShadowColor = "shadow-balatro-badge-common-dark";
    break;
  case "uncommon":
    badgeColor = "bg-balatro-badge-uncommon";
    badgeShadowColor = "shadow-balatro-badge-uncommon-dark";
    break;
  case "rare":
    badgeColor = "bg-balatro-badge-rare";
    badgeShadowColor = "shadow-balatro-badge-rare-dark";
    break;
  case "legendary":
    badgeColor = "bg-balatro-badge-legendary";
    badgeShadowColor = "shadow-balatro-badge-legendary-dark";
    break;
}
---

<div
  class="bg-balatro-black border-2 px-8 max-w-80 flex flex-col items-center text-balatro-white text-2xl font-balatro"
>
  <h3 class="text-4xl text-shadow capitalize">{name}</h3>
  <div class="relative w-36 h-48">
    <Image
      src={images[image_path]()}
      alt=" "
      class="col-span-1 object-cover absolute top-0 left-0 object-left w-36 h-48 render-pixelated"
    />
    {
      soul && (
        <Image
          src={images[image_path]()}
          alt=" "
          class="absolute top-0 left-0 object-cover object-right w-36 h-48  render-pixelated drop-shadow-soul animate-soul"
        />
      )
    }
  </div>
  <p
    class="px-2 bg-white rounded-2xl shadow-balatro shadow-balatro-grey min-h-20 content-center text-center text-balatro-black"
  >
    {
      modifiedText.map((line) => (
        <>
          <Fragment set:html={line} />
          <br />
        </>
      ))
    }
  </p>
  <!-- Badge -->
  <div
    class={`rounded-full w-36 shadow-balatro text-center capitalize ${badgeColor} ${badgeShadowColor} text-shadow`}
  >
    {badge}
  </div>
</div>
